import{_ as e,p as a,q as r,a1 as i}from"./framework-8c3532e7.js";const t={},s=i('<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>Welcome to the documentation of Decrel.</p><p>Decrel is a library to let you declare relations between data models, and utilize them in Scala code when possible.</p><h1 id="tl-dr" tabindex="-1"><a class="header-anchor" href="#tl-dr" aria-hidden="true">#</a> TL;DR</h1><h2 id="declaring-relations" tabindex="-1"><a class="header-anchor" href="#declaring-relations" aria-hidden="true">#</a> Declaring relations</h2><p>Declare your relations like this:</p><h2 id="accessing-your-datasource" tabindex="-1"><a class="header-anchor" href="#accessing-your-datasource" aria-hidden="true">#</a> Accessing your datasource</h2><h3 id="if-your-codebase-is-based-on-zio" tabindex="-1"><a class="header-anchor" href="#if-your-codebase-is-based-on-zio" aria-hidden="true">#</a> If your codebase is based on ZIO</h3><h3 id="if-your-codebase-is-based-on-cats-effect" tabindex="-1"><a class="header-anchor" href="#if-your-codebase-is-based-on-cats-effect" aria-hidden="true">#</a> If your codebase is based on cats-effect</h3><h2 id="composing-your" tabindex="-1"><a class="header-anchor" href="#composing-your" aria-hidden="true">#</a> Composing your</h2><h3 id="if-your-tests-use-gen-from-zio-test" tabindex="-1"><a class="header-anchor" href="#if-your-tests-use-gen-from-zio-test" aria-hidden="true">#</a> If your tests use <code>Gen</code> from ZIO Test</h3><h3 id="if-your-tests-use-gen-from-scalacheck" tabindex="-1"><a class="header-anchor" href="#if-your-tests-use-gen-from-scalacheck" aria-hidden="true">#</a> If your tests use <code>Gen</code> from ScalaCheck</h3><h1 id="quickstart" tabindex="-1"><a class="header-anchor" href="#quickstart" aria-hidden="true">#</a> Quickstart</h1><h1 id="the-big-idea" tabindex="-1"><a class="header-anchor" href="#the-big-idea" aria-hidden="true">#</a> The big idea</h1><p>There are 2 ideas.</p><ul><li>discrepancy between the concept of an operation, and real-life methods</li><li>we can utilize ideas that domain models</li></ul><h1 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h1><h1 id="generators" tabindex="-1"><a class="header-anchor" href="#generators" aria-hidden="true">#</a> Generators</h1>',18),d=[s];function o(n,c){return a(),r("div",null,d)}const l=e(t,[["render",o],["__file","index.html.vue"]]);export{l as default};
