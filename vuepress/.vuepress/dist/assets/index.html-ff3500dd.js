import{_ as a,p as n,q as s,a1 as e}from"./framework-8c3532e7.js";const t={},o=e(`<p>Head onto the <a href="guide">guide</a> to get started!</p><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>Welcome to the documentation of Decrel.</p><p>Decrel is a library to let you declare relations between data models, and utilize them in Scala code when possible.</p><h1 id="phrases" tabindex="-1"><a class="header-anchor" href="#phrases" aria-hidden="true">#</a> Phrases</h1><p>I will be using the following words/phrases in this documentation.</p><ul><li>domain declaration site <ul><li>Places you declare your domain classes. This is where the relations should live too.</li></ul></li><li>call site (callsite) <ul><li>The place you compose your domains and turn them into values</li></ul></li><li>implementation site <ul><li>THe place you define implementations for each of your relations</li></ul></li></ul><h1 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to use</h1><h2 id="declaring-relations" tabindex="-1"><a class="header-anchor" href="#declaring-relations" aria-hidden="true">#</a> Declaring relations</h2><p>Declare your relations next to your domain classes:</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">case</span> <span class="token keyword">class</span> Book<span class="token punctuation">(</span>id<span class="token operator">:</span> Book<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>
<span class="token keyword">object</span> Book <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token keyword">class</span> Id<span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>
  
  <span class="token comment">// Add these</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> fetch         <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Single<span class="token punctuation">[</span>Book<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Book<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> <span class="token keyword">self</span>          <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Self<span class="token punctuation">[</span>Book<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> currentRental <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>Book<span class="token punctuation">,</span> Rental<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> allRentals    <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Many<span class="token punctuation">[</span>Book<span class="token punctuation">,</span> List<span class="token punctuation">,</span> Rental<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">case</span> <span class="token keyword">class</span> User<span class="token punctuation">(</span>id<span class="token operator">:</span> User<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
<span class="token keyword">object</span> User <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token keyword">class</span> Id<span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>

  <span class="token comment">// And here</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> fetch          <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Single<span class="token punctuation">[</span>User<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> User<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> <span class="token keyword">self</span>           <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Self<span class="token punctuation">[</span>User<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> currentRentals <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Many<span class="token punctuation">[</span>User<span class="token punctuation">,</span> List<span class="token punctuation">,</span> Rental<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> allRentals     <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Many<span class="token punctuation">[</span>User<span class="token punctuation">,</span> List<span class="token punctuation">,</span> Rental<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">case</span> <span class="token keyword">class</span> Rental<span class="token punctuation">(</span>id<span class="token operator">:</span> Rental<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> bookId<span class="token operator">:</span> Book<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> rentDate<span class="token operator">:</span> LocalDate<span class="token punctuation">)</span>
<span class="token keyword">object</span> Rental <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token keyword">class</span> Id<span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>

  <span class="token comment">// Also here</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> fetch <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Single<span class="token punctuation">[</span>Rental<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Rental<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> <span class="token keyword">self</span>  <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Self<span class="token punctuation">[</span>Rental<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> book  <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Single<span class="token punctuation">[</span>Rental<span class="token punctuation">,</span> Book<span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token keyword">object</span> user  <span class="token keyword">extends</span> Relation<span class="token punctuation">.</span>Single<span class="token punctuation">[</span>Rental<span class="token punctuation">,</span> User<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here are the rules:</p><ul><li>Name the relations using the target type name and additional details, if applicable.</li><li></li><li>There are two special cases: <ul><li><code>fetch</code> is a relation between an object&#39;s id and the object. It&#39;s</li></ul></li></ul><p>You can see 4 different kinds of relations.</p><ul><li><code>Relation.Single</code></li></ul><p>In this example,</p><p><code>Book.fetch</code> is a single relation (one <code>Book.Id</code> means exactly one <code>Book</code>)</p><p><code>Book.self</code> is a self relation (one <code>Book</code> is exactly one <code>Book</code>, which is itself)</p><p><code>Book.currentRental</code> is an optional relation (one <code>Book</code> means at most related <code>Rental</code> object)</p><p><code>Book.allPastRentals</code> is a many relation (one <code>Book</code> means <code>List[Rental]</code>)</p><h2 id="accessing-your-datasource" tabindex="-1"><a class="header-anchor" href="#accessing-your-datasource" aria-hidden="true">#</a> Accessing your datasource</h2><h3 id="relation-traversals" tabindex="-1"><a class="header-anchor" href="#relation-traversals" aria-hidden="true">#</a> Relation traversals</h3><p>Now that your domain forms a directed graph, you can traverse the graph and describe what additional data you want from the starting point you have.</p><p>For example, say you have a value of type <code>Book</code>, and you want to get</p><p>You can compose your relations using <code>&amp;</code>, <code>&gt;&gt;:</code>, <code>:&gt;:</code> operators.</p><h3 id="if-your-codebase-is-based-on-zio" tabindex="-1"><a class="header-anchor" href="#if-your-codebase-is-based-on-zio" aria-hidden="true">#</a> If your codebase is based on ZIO</h3><ul><li>Callsite</li></ul><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Implementation</li></ul><p>For each relations you want to reify, you need to</p><h3 id="if-your-codebase-is-based-on-cats-effect" tabindex="-1"><a class="header-anchor" href="#if-your-codebase-is-based-on-cats-effect" aria-hidden="true">#</a> If your codebase is based on cats-effect</h3><h2 id="composing-your-generators" tabindex="-1"><a class="header-anchor" href="#composing-your-generators" aria-hidden="true">#</a> Composing your generators</h2><h3 id="if-your-tests-use-gen-from-zio-test" tabindex="-1"><a class="header-anchor" href="#if-your-tests-use-gen-from-zio-test" aria-hidden="true">#</a> If your tests use <code>Gen</code> from ZIO Test</h3><h3 id="if-your-tests-use-gen-from-scalacheck" tabindex="-1"><a class="header-anchor" href="#if-your-tests-use-gen-from-scalacheck" aria-hidden="true">#</a> If your tests use <code>Gen</code> from ScalaCheck</h3><h1 id="underlying-idea" tabindex="-1"><a class="header-anchor" href="#underlying-idea" aria-hidden="true">#</a> Underlying idea</h1><p>There are 2 ideas.</p><ul><li>discrepancy between the concept of an operation, and real-life methods</li><li>we can utilize ideas that domain models</li></ul><h1 id="other-topics" tabindex="-1"><a class="header-anchor" href="#other-topics" aria-hidden="true">#</a> Other Topics</h1><h2 id="i-want-to-make-runtime-datasource-access-faster-for-a-hot-path" tabindex="-1"><a class="header-anchor" href="#i-want-to-make-runtime-datasource-access-faster-for-a-hot-path" aria-hidden="true">#</a> I want to make runtime datasource access faster for a hot path</h2><p>If if you want to override the default runtime behavior for datasource access, here&#39;s how you do it.</p><h3 id="in-the-callsite" tabindex="-1"><a class="header-anchor" href="#in-the-callsite" aria-hidden="true">#</a> In the callsite</h3><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// TODO implement</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="in-the-implementation-site" tabindex="-1"><a class="header-anchor" href="#in-the-implementation-site" aria-hidden="true">#</a> In the implementation site</h3><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// TODO implement</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="can-we-derive-the-relations" tabindex="-1"><a class="header-anchor" href="#can-we-derive-the-relations" aria-hidden="true">#</a> Can we derive the relations?</h2><p>Some people have pointed out the similarities of relations with optics, which I agree. Naturally, the question follows that if we can derive the relations. Unfortunately, I don&#39;t think it&#39;s possible or a good idea, purely because existing code doesn&#39;t have enough information to do so.</p><p>Specifically, referring to the example in the tutorial page, it is impossible to mechanically infer <code>Book.currentRental</code> or <code>Book.allPastRentals</code> as relationship between <code>Book</code> and <code>Rental</code>.</p><p>This leads to a different point: explicitly added relations work as documentation in to your codebase, as opposed to optics declaration, which adds no new information.</p><h2 id="how-is-this-library-implemented" tabindex="-1"><a class="header-anchor" href="#how-is-this-library-implemented" aria-hidden="true">#</a> How is this library implemented?</h2><p>Here&#39;s a tour of the library&#39;s structure.</p>`,50),i=[o];function c(l,p){return n(),s("div",null,i)}const r=a(t,[["render",c],["__file","index.html.vue"]]);export{r as default};
